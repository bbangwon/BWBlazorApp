@using Microsoft.AspNetCore.Components.Web

<div class="bwcalendar">
    <div class="month">
        <ul>
            <li class="prev" @onclick="PrevMonth" style="cursor: pointer;">
                &#10094;
            </li>
            <li class="next" @onclick="NextMonth" style="cursor: pointer;">
                &#10095;
            </li>
            <li style="cursor: pointer;" @onclick="@(() => this.SelectedDate = DateTime.Today)">@SelectedDate.ToString("yyyy년 MM월")</li>
        </ul>
    </div>

    <ul class="weekdays">
        <li>일</li>
        <li>월</li>
        <li>화</li>
        <li>수</li>
        <li>목</li>
        <li>금</li>
        <li>토</li>
    </ul>

    @{
        int count = 1;

    }

    <ul class="days">
        @for (int i = 0; i < StartDayOfWeek; i++)
        {
            <li>&nbsp;</li>
            count++;
        }

        @for (int i = 1; i <= EndDayOfMonth; i++)
        {
            var current = this.CurrentDay(i);

            <li @onclick="() => ChangeSelectedDate(current.ThisDay)"><span class="@current.Today @current.Active">@i</span></li>
            count++;
        }

        @for (int i = 0; i < 38 - count; i++)
        {
            <li>&nbsp;</li>
        }       
    </ul>
</div>

@code {
    public DateTime SelectedDate { get; private set; } = DateTime.Today;

    public int StartDayOfWeek
    {
        get
        {
            return (int)(new DateTime(SelectedDate.Year, SelectedDate.Month, 1)).DayOfWeek;
        }
    }

    public int EndDayOfMonth
    {
        get
        {
            return DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month);
        }
    }

    void PrevMonth()
    {
        this.SelectedDate = this.SelectedDate.AddMonths(-1);
    }

    void NextMonth()
    {
        this.SelectedDate = this.SelectedDate.AddMonths(1);
    }

    (DateTime ThisDay, string? Today, string? Active) CurrentDay(int dayOfMonth)
    {
        var thisDay = new DateTime(this.SelectedDate.Year, this.SelectedDate.Month, dayOfMonth);
        var today = (thisDay.Date == DateTime.Today) ? "today" : null;
        var active = (thisDay == this.SelectedDate) ? "active" : null;
        return (thisDay, today, active);
    }

    void ChangeSelectedDate(DateTime newDate)
    {
        this.SelectedDate = newDate;
        OnSelectedDateChanged.InvokeAsync(this.SelectedDate);
    }

    [Parameter] 
    public EventCallback<DateTime> OnSelectedDateChanged { get; set; }  
}
