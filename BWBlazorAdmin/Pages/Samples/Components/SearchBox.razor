@using System.Timers
@implements IDisposable

<div class="search">
    <i class="oi oi-eye"></i>
    <input placeholder="Search..."
           @attributes="AdditionalAttributes" 
           @bind="SearchQuery" 
           @bind:event="oninput" />
    <input type="button" value="Search" @onclick="Search" />
</div>
<hr />
자식: @SearchQuery

@code {
    private string? searchQuery;
    private Timer? debounceTimer;

    public string? SearchQuery { 
        get => searchQuery; 
        set { 
            searchQuery = value; 
            debounceTimer?.Stop();
            debounceTimer?.Start();
        }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    [Parameter]
    public int Debounce { get; set; } = 3000;

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += SearchHandler;        
    }

    void Search()
    {
        SearchQueryChanged.InvokeAsync(SearchQuery);
    }

    async void SearchHandler(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery));
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}
