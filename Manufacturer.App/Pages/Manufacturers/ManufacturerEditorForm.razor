
@inject IManufacturerRepository repository
@inject IJSRuntime jsRuntime

<div class="modal" tabindex="-1" id="manufacturerEditorDialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">@EditorFormTitle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
          <EditForm Model="EditorModel" OnValidSubmit="FormSubmitProcess">
              <DataAnnotationsValidator></DataAnnotationsValidator>
              <ValidationSummary></ValidationSummary>
              <input type="hidden" @bind-value="EditorModel!.Id" />
              <div class="form-group">
                  <label for="name">이름</label>
                  <InputText id="name" class="form-control" @bind-Value="EditorModel!.Name"></InputText>               
                  <ValidationMessage For="(()=>EditorModel.Name)"></ValidationMessage>
              </div>
                <div class="form-group">
                    <label for="code">코드</label>
                        <InputText id="code" class="form-control" @bind-Value="EditorModel!.ManufacturerCode"></InputText>
                    <ValidationMessage For="(()=>EditorModel.ManufacturerCode)"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label for="comment">Comment</label>
                        <InputText id="comment" class="form-control" @bind-Value="EditorModel!.Comment"></InputText>
                    <ValidationMessage For="(()=>EditorModel.Comment)"></ValidationMessage>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
          </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
    [Parameter]
    public RenderFragment? EditorFormTitle { get; set; }

    [Parameter]
    public Manufacturer? EditorModel { get; set; }

    [Parameter]
    public Action? SaveOrUpdated { get; set; }

    private async void FormSubmitProcess()
    {
        if(EditorModel!.Id == 0)
        {
            //저장
            await repository.AddAsync(EditorModel);
        }
        else
        {
            //수정
            await repository.EditAsync(EditorModel);
        }

        await jsRuntime.InvokeVoidAsync("hideModal", "manufacturerEditorDialog");
        SaveOrUpdated?.Invoke();
    }
}
