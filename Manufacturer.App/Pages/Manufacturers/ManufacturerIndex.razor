@page "/Manufacturers"
@inject IManufacturerRepository repository
@inject IJSRuntime jsRuntime

<h3>Manufacturer List</h3>

<p>고객사 리스트를 출력합니다.</p>

@if (manufacturers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Manufacterer Code</th>
                <th>Comment</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manufacturer in manufacturers)
            {
                <tr>
                    <td>@manufacturer.Id</td>
                    <td>@manufacturer.Name</td>
                    <td>@manufacturer.ManufacturerCode</td>
                    <td>@manufacturer.Comment</td>
                    <td>
                        <input type="button" value="Edit" class="btn btn-primary"
                       data-bs-toggle="modal" data-bs-target="#manufacturerEditorDialog"
                       @onclick="(() => EditBy(manufacturer))" />
                    </td>
                    <td>
                        <input type="button" value="Delete" class="btn btn-danger"
                       data-bs-toggle="modal" data-bs-target="#manufacturerDeleteDialog"
                       @onclick="() => DeleteBy(manufacturer)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ManufacturerPager Pager="pager" PageIndexChanged="PageIndexChanged"></ManufacturerPager>

<div>
    <input type="button" value="등록" class="btn btn-primary"
           data-bs-toggle="modal" data-bs-target="#manufacturerEditorDialog"
           @onclick="(()=> btnCreate_Click())" />
</div>

<ManufacturerDeleteDialog OnClick="btnDelete_Click"></ManufacturerDeleteDialog>

<ManufacturerEditorForm EditorModel="manufacturer" SaveOrUpdated="SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ManufacturerEditorForm>

@code {
    private Pager pager = new Pager
    {
        Number = 1,
        Size = 2,
        ButtonCount = 2
    };

    private string editorFormTitle = "";
    List<Manufacturer>? manufacturers = null;

    Manufacturer manufacturer = new Manufacturer();    

    protected override async Task OnInitializedAsync()
    {
        await LoadManufacturers();
    }

    protected async Task btnDelete_Click()
    {
        //await jsRuntime.InvokeAsync<object>("alert", "여기까지 왔군요" + this.manufacturer.Id + "번을 지울건가요");
        await repository.DeleteAsync(this.manufacturer.Id);

        manufacturers = await repository.GetAllAsync();
        manufacturer = new Manufacturer();
    }

    protected void btnCreate_Click()
    {
        editorFormTitle = "등록하기";
        manufacturer = new Manufacturer();
    }

    private void DeleteBy(Manufacturer manufacturer)
    {
        this.manufacturer = manufacturer;
    }

    private void EditBy(Manufacturer manufacturer)
    {
        editorFormTitle = "수정하기";
        this.manufacturer = manufacturer;
    }

    private async void SaveOrUpdated()
    {
        await LoadManufacturers();
    }

    protected async void PageIndexChanged(int pageNumber)
    {
        pager.Number = pageNumber;
        await LoadManufacturers();
    }

    protected async Task LoadManufacturers()
    {
        pager.RecordCount = await repository.CountAsync();
        manufacturers = await repository.GetAllAsync(pager.Index, pager.Size);

        StateHasChanged();
    }
}
